<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2002 Advent Calendar: YAML</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2002 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 15th day of Advent my True Language brought to me..
</div>
<div class="modtitle">YAML</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../14th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../16th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>One of the all time most useful Perl modules is <b>Data::Dumper</b>.  It
can be used to dump out any - well, almost any - data structure as Perl
code that allows you to see what's in it.  This is invaluable when
you're debugging.</p>
<p>One of the other great uses of <b>Data::Dumper</b> is for simple data
persistence.  You can <code>eval</code> back in a structure printed out with
<code>Dumper</code> and recreate the data structure.  You can use this for
technique for saving data between program runs, or communicating data
between other Perl programs.  The biggest advantage is that if you
understand Perl data structures, then it's easy to edit the data
structures by hand.</p>
<p>This, however, is a big disadvantage if you don't understand Perl data
structures.  For example, if you're using Data::Dumper to create a
config file, then you'd better hope the admin can program Perl.
Likewise if you want a program to read the file, then that program
better be Perl.  If you're trying to communicate your output to a Java
program then you have a problem.</p>
<p>The biggest disadvantage of using <b>Data::Dumper</b> is however that unless
you trust the data source then you can't eval it - the file could
contain malicious code rather than a <b>Data::Dumper</b> data structure.</p>
<p>Enter YAML.  YAML is alternative data structure language that is human
readable, cross platform (Perl, Python, Java) and most importantly 
eval safe.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?YAML">[Read the documentation for YAML on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p>To demonstrate this let's create a data structure that repents the
IMDB's top three films.</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on perl's safety procedures
  use strict;
  use warnings;</pre>

<pre>  # load the URI module
  use URI;</pre>

<pre>  # build a list of IMDB's current top films
  my @top_films;</pre>

<pre>  my %godfather =
    ( name =&gt; "Godfather, The",
      stars =&gt; { "Marlon Brando"  =&gt; "Don Vito Corleone",
	         "Al Pacino"      =&gt; "Michael 'Mike' Corleone",
                 "Diane Keaton"   =&gt; "Kay Adams-Corleone", },
      year  =&gt; 1972,
      url   =&gt; "http://us.imdb.com/Title?0068646");</pre>

<pre>  push @top_films, \%godfather;</pre>

<pre>  my %shawshank =
    ( name =&gt; "Shawshank Redemption, The",
      stars =&gt; { "Tim Robbins"    =&gt; "Andy Dufresne",
	         "Morgan Freeman" =&gt; "Ellis Boyd 'Red' Redding",
                 "Bob Gunton"     =&gt; "Warden Samuel Norton", },
      year  =&gt; 1994,
      url   =&gt; "http://us.imdb.com/Title?0111161");</pre>

<pre>  push @top_films, \%shawshank;</pre>

<pre>  my %godfather2 =
    ( name =&gt; "Godfather: Part 2, The",
      stars =&gt; { "Al Pacino"      =&gt; "Michael 'Mike' Corleone",
                 "Robert Duvall"  =&gt; "Tom Hagen",
                 "Diane Keaton"   =&gt; "Kay Adams-Corleone", },
      year  =&gt; 1974,
      url   =&gt; "http://us.imdb.com/Title?0071562");</pre>

<pre>  push @top_films, \%godfather2;</pre>

<p>And then print out the with <b>Data::Dumper</b>:</p>
<pre>  use IO::File;
  my $fh = IO::File-&gt;new("dumper","&gt;")
    or die "Can't open 'dumper': $!)</pre>

<pre>  use Data::Dumper;
  print {$fh} Dumper \@top_films;</pre>

<p>Which produces a file that looks like: </p>
<pre>  $VAR1 = [
            {
              'stars' =&gt; {
                           'Diane Keaton' =&gt; 'Kay Adams-Corleone',
                           'Marlon Brando' =&gt; 'Don Vito Corleone',
                           'Al Pacino' =&gt; 'Michael \'Mike\' Corleone'
                         },
              'url' =&gt; 'http://us.imdb.com/Title?0068646',
              'name' =&gt; 'Godfather, The',
              'year' =&gt; 1972
            },
            {
              'stars' =&gt; {
                           'Morgan Freeman' =&gt; 'Ellis Boyd \'Red\' Redding',
                           'Tim Robbins' =&gt; 'Andy Dufresne',
                           'Bob Gunton' =&gt; 'Warden Samuel Norton'
                         },
              'url' =&gt; 'http://us.imdb.com/Title?0111161',
              'name' =&gt; 'Shawshank Redemption, The',
              'year' =&gt; 1994
            },
            {
              'stars' =&gt; {
                           'Diane Keaton' =&gt; 'Kay Adams-Corleone',
                           'Al Pacino' =&gt; 'Michael \'Mike\' Corleone',
                           'Robert Duvall' =&gt; 'Tom Hagen'
                         },
              'url' =&gt; 'http://us.imdb.com/Title?0071562',
              'name' =&gt; 'Godfather: Part 2, The',
              'year' =&gt; 1974
            }
          ];</pre>

<p>That can then be read back in with <code>eval</code> like so:</p>
<pre>  use IO::File;
  my $fh2 = IO::File-&gt;new("dumper","&lt;")
    or die "Can't open 'dumper': $!)</pre>

<pre>  my @films_dumper;
  {
    # slurp in the whole file, rather than
    # a line at a time
    local $/; </pre>

<pre>    # load all the data
    my $data = &lt;$fh&gt;;</pre>

<pre>    @films_dumper = @{ eval $data };
  }</pre>

<p>Now let's see how that works with <b>YAML</b></p>
<pre>  my $fh3 = IO::File-&gt;new("yaml","&gt;")
    or die "Can't open 'yaml': $!)</pre>

<pre>  use YAML;
  print {$fh3} Dump \@top_films;</pre>

<p>And that produces output like this</p>
<pre>  --- #YAML:1.0
  - name: Godfather, The
    stars:
      Al Pacino: Michael 'Mike' Corleone
      Diane Keaton: Kay Adams-Corleone
      Marlon Brando: Don Vito Corleone
    url: http://us.imdb.com/Title?0068646
    year: 1972
  - name: Shawshank Redemption, The
    stars:
      Bob Gunton: Warden Samuel Norton
      Morgan Freeman: Ellis Boyd 'Red' Redding
      Tim Robbins: Andy Dufresne
    url: http://us.imdb.com/Title?0111161
    year: 1994
  - name: 'Godfather: Part 2, The'
    stars:
      Al Pacino: Michael 'Mike' Corleone
      Diane Keaton: Kay Adams-Corleone
      Robert Duvall: Tom Hagen
    url: http://us.imdb.com/Title?0071562
    year: 1974</pre>

<p>I'll hope you'll agree with me that the output is quite easy to
understand.  This can be read back in like so</p>
<pre>  use IO::File;
  my $fh4 = IO::File-&gt;new("yaml","&lt;")
    or die "Can't open 'yaml': $!)</pre>

<pre>  my @films_yaml;
  {
    # slurp in the whole file, rather than
    # a line at a time
    local $/; </pre>

<pre>    # load all the data
    my $data = &lt;$fh4&gt;;</pre>

<pre>    @films_yaml = @{ Load($data) };
  }</pre>

</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/author/JHI/perl-5.8.0/ext/Data/Dumper/Dumper.pm">Data::Dumper</a></li>
<li><a href="http://search.cpan.org/author/INGY/Data-Denter/Denter.pod">Data::Denter - Pure Perl predecessor to YAML</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:53 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>